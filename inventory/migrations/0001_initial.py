# Generated by Django 5.1.2 on 2025-09-02 04:19

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Supplier name (HTML tags will be stripped)', max_length=200)),
                ('contact_person', models.CharField(blank=True, help_text='Contact person name (HTML tags will be stripped)', max_length=100)),
                ('phone', models.CharField(blank=True, help_text='Supplier phone number', max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(blank=True, help_text='Supplier email address', max_length=254)),
                ('address', models.TextField(blank=True, help_text='Supplier address (HTML tags will be stripped)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this supplier is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='suppliers', to='core.organization')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Item name (HTML tags will be stripped)', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Item description (HTML tags will be stripped)')),
                ('sku', models.CharField(max_length=100, unique=True)),
                ('unit', models.CharField(choices=[('KG', 'Kilogram'), ('G', 'Gram'), ('L', 'Liter'), ('ML', 'Milliliter'), ('PCS', 'Pieces'), ('PACK', 'Pack')], default='PCS', help_text='Unit of measurement', max_length=10)),
                ('current_stock', models.DecimalField(decimal_places=2, default=0, help_text='Current stock quantity', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('minimum_stock', models.DecimalField(decimal_places=2, default=0, help_text='Minimum stock level for alerts', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('cost_price', models.DecimalField(decimal_places=2, default=0, help_text='Cost per unit', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='core.organization')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='inventory.supplier')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_number', models.CharField(max_length=50)),
                ('capacity', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('condition', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('needs_repair', 'Needs Repair'), ('out_of_service', 'Out of Service')], default='good', max_length=20)),
                ('last_maintenance', models.DateField(blank=True, null=True)),
                ('purchase_date', models.DateField(blank=True, null=True)),
                ('purchase_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_tables', to='core.location')),
            ],
            options={
                'ordering': ['location_id', 'table_number'],
            },
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['organization', 'is_active'], name='inventory_s_organiz_3bd478_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['is_active'], name='inventory_s_is_acti_3743da_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['-created_at'], name='inventory_s_created_839f3a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='supplier',
            unique_together={('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['organization', 'is_active'], name='inventory_i_organiz_623c94_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['supplier', 'is_active'], name='inventory_i_supplie_ff8473_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['sku'], name='inventory_i_sku_e27286_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['unit'], name='inventory_i_unit_19b94a_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['-updated_at'], name='inventory_i_updated_ef0de3_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(condition=models.Q(('current_stock__lte', models.F('minimum_stock'))), fields=['organization', 'current_stock'], name='low_stock_items_idx'),
        ),
        migrations.AddConstraint(
            model_name='inventoryitem',
            constraint=models.CheckConstraint(condition=models.Q(('current_stock__gte', 0)), name='positive_current_stock'),
        ),
        migrations.AddConstraint(
            model_name='inventoryitem',
            constraint=models.CheckConstraint(condition=models.Q(('minimum_stock__gte', 0)), name='positive_minimum_stock'),
        ),
        migrations.AddConstraint(
            model_name='inventoryitem',
            constraint=models.CheckConstraint(condition=models.Q(('cost_price__gte', 0)), name='positive_cost_price'),
        ),
        migrations.AlterUniqueTogether(
            name='inventoryitem',
            unique_together={('organization', 'name'), ('sku',)},
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['location', 'is_active'], name='inventory_t_locatio_b9dcfe_idx'),
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['condition', 'is_active'], name='inventory_t_conditi_485b08_idx'),
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['last_maintenance'], name='inventory_t_last_ma_c46cdb_idx'),
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['-created_at'], name='inventory_t_created_582fdd_idx'),
        ),
        migrations.AddConstraint(
            model_name='table',
            constraint=models.CheckConstraint(condition=models.Q(('capacity__gte', 1), ('capacity__lte', 50)), name='valid_inventory_table_capacity'),
        ),
        migrations.AddConstraint(
            model_name='table',
            constraint=models.CheckConstraint(condition=models.Q(('purchase_cost__isnull', True), ('purchase_cost__gte', 0), _connector='OR'), name='positive_purchase_cost'),
        ),
        migrations.AlterUniqueTogether(
            name='table',
            unique_together={('location', 'table_number')},
        ),
    ]
