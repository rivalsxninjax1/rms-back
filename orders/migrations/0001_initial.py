# Generated by Django 5.1.2 on 2025-09-02 04:19

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('menu', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Unique cart identifier for API access')),
                ('session_key', models.CharField(blank=True, db_index=True, help_text='Session key for anonymous carts', max_length=40, null=True)),
                ('cart_hash', models.CharField(blank=True, help_text='SHA-256 hash of cart contents for integrity validation', max_length=64)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of cart creator for security tracking', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string for fraud detection')),
                ('status', models.CharField(choices=[('active', 'Active'), ('abandoned', 'Abandoned'), ('converted', 'Converted to Order'), ('expired', 'Expired')], default='active', help_text='Current cart status', max_length=20)),
                ('delivery_option', models.CharField(choices=[('DINE_IN', 'Dine-in'), ('PICKUP', 'Pickup'), ('DELIVERY', 'Delivery')], default='PICKUP', help_text='Service type for this cart', max_length=16)),
                ('delivery_address', models.JSONField(blank=True, default=dict, help_text='Delivery address details (street, city, postal_code, etc.)')),
                ('delivery_instructions', models.TextField(blank=True, help_text='Special delivery instructions', max_length=500)),
                ('estimated_delivery_time', models.DateTimeField(blank=True, help_text='Estimated delivery/pickup time', null=True)),
                ('customer_name', models.CharField(blank=True, help_text='Customer name for guest orders', max_length=100)),
                ('customer_phone', models.CharField(blank=True, help_text='Customer phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be valid format', regex='^[\\+]?[1-9]?[0-9]{7,15}$')])),
                ('customer_email', models.EmailField(blank=True, help_text='Customer email for order updates', max_length=254)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Cart subtotal before modifiers and fees', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('modifier_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total modifier adjustments (can be negative)', max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Applied discount amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('applied_coupon_code', models.CharField(blank=True, help_text='Applied coupon code', max_length=50)),
                ('coupon_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount from applied coupon', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('loyalty_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Loyalty program discount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tip_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tip amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tip_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Tip percentage (0-100%)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Delivery fee amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('service_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Service fee amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Calculated tax amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_rate', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Tax rate applied (0.0000-1.0000)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.0000')), django.core.validators.MaxValueValidator(Decimal('1.0000'))])),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final cart total', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, help_text='Cart-level notes and special instructions', max_length=1000)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional cart metadata (promo codes, referrals, etc.)')),
                ('item_count', models.PositiveIntegerField(default=0, help_text='Cached count of items in cart')),
                ('modification_count', models.PositiveIntegerField(default=0, help_text='Number of times cart has been modified')),
                ('source', models.CharField(default='web', help_text='Cart creation source (web, mobile, api, etc.)', max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Cart expiration time', null=True)),
                ('converted_at', models.DateTimeField(blank=True, help_text='When cart was converted to order', null=True)),
                ('abandoned_at', models.DateTimeField(blank=True, help_text='When cart was marked as abandoned', null=True)),
                ('table', models.ForeignKey(blank=True, help_text='Assigned table for dine-in orders', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carts', to='core.table')),
                ('user', models.ForeignKey(blank=True, help_text='Cart owner (null for guest carts)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='carts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Shopping Cart',
                'verbose_name_plural': 'Shopping Carts',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Item quantity (1-999)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price at time of adding to cart', max_digits=12)),
                ('selected_modifiers', models.JSONField(blank=True, default=list, help_text='Selected modifier IDs and details')),
                ('notes', models.TextField(blank=True, help_text='Special instructions for this item', max_length=500)),
                ('item_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for this cart item')),
                ('modifier_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total cost of selected modifiers', max_digits=12)),
                ('line_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total line cost (unit_price + modifiers) * quantity', max_digits=12)),
                ('is_gift', models.BooleanField(default=False, help_text='Mark item as gift')),
                ('gift_message', models.CharField(blank=True, help_text='Gift message for this item', max_length=200)),
                ('scheduled_for', models.DateTimeField(blank=True, help_text='Schedule item for specific time', null=True)),
                ('original_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Original menu item price at time of adding', max_digits=12)),
                ('discount_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Item-level discount applied', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('added_via', models.CharField(choices=[('web', 'Web Interface'), ('mobile', 'Mobile App'), ('api', 'API'), ('pos', 'Point of Sale'), ('phone', 'Phone Order')], default='web', help_text='Source of item addition', max_length=50)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(help_text='Parent cart', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.cart')),
                ('menu_item', models.ForeignKey(help_text='Menu item being ordered', on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='menu.menuitem')),
            ],
            options={
                'verbose_name': 'Cart Item',
                'verbose_name_plural': 'Cart Items',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Unique order identifier for API access')),
                ('order_number', models.CharField(blank=True, db_index=True, help_text='Human-readable order number (auto-generated)', max_length=20, unique=True)),
                ('customer_name', models.CharField(blank=True, help_text='Customer name for guest orders', max_length=100)),
                ('customer_phone', models.CharField(blank=True, help_text='Customer phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be valid format', regex='^[\\+]?[1-9]?[0-9]{7,15}$')])),
                ('customer_email', models.EmailField(blank=True, help_text='Customer email for order updates', max_length=254)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Payment'), ('CONFIRMED', 'Confirmed'), ('PREPARING', 'Preparing'), ('READY', 'Ready for Pickup/Delivery'), ('OUT_FOR_DELIVERY', 'Out for Delivery'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded')], db_index=True, default='PENDING', help_text='Current order status', max_length=20)),
                ('delivery_option', models.CharField(choices=[('DINE_IN', 'Dine-in'), ('PICKUP', 'Pickup'), ('DELIVERY', 'Delivery')], db_index=True, default='PICKUP', help_text='Service delivery method', max_length=16)),
                ('delivery_address', models.JSONField(blank=True, default=dict, help_text='Delivery address details (street, city, zip, etc.)')),
                ('delivery_instructions', models.TextField(blank=True, help_text='Special delivery instructions', max_length=500)),
                ('estimated_delivery_time', models.DateTimeField(blank=True, db_index=True, help_text='Estimated delivery/pickup time', null=True)),
                ('actual_delivery_time', models.DateTimeField(blank=True, help_text='Actual delivery/pickup time', null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Order subtotal before modifiers and fees', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('modifier_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total modifier adjustments (can be negative)', max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Applied discount amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('coupon_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount from applied coupon', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('loyalty_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Loyalty program discount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tip_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tip amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Delivery fee amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('service_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Service fee amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Calculated tax amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_rate', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Tax rate applied (0.0000-1.0000)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.0000')), django.core.validators.MaxValueValidator(Decimal('1.0000'))])),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final order total', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('payment_method', models.CharField(blank=True, choices=[('CASH', 'Cash'), ('CARD', 'Credit/Debit Card'), ('DIGITAL_WALLET', 'Digital Wallet'), ('GIFT_CARD', 'Gift Card'), ('LOYALTY_POINTS', 'Loyalty Points'), ('BANK_TRANSFER', 'Bank Transfer')], help_text='Payment method used', max_length=50)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded'), ('PARTIALLY_REFUNDED', 'Partially Refunded')], default='PENDING', help_text='Payment processing status', max_length=20)),
                ('payment_reference', models.CharField(blank=True, help_text='Payment processor reference ID', max_length=100)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total refunded amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, help_text='Order-level notes and special instructions', max_length=1000)),
                ('applied_coupon_code', models.CharField(blank=True, help_text='Applied coupon code', max_length=50)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional order metadata')),
                ('source', models.CharField(default='web', help_text='Order creation source (web, mobile, api, pos, etc.)', max_length=50)),
                ('item_count', models.PositiveIntegerField(default=0, help_text='Total number of items in order')),
                ('preparation_time_minutes', models.PositiveIntegerField(blank=True, help_text='Estimated preparation time in minutes', null=True)),
                ('actual_preparation_time', models.DurationField(blank=True, help_text='Actual time taken to prepare order', null=True)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When order was confirmed', null=True)),
                ('started_preparing_at', models.DateTimeField(blank=True, help_text='When order preparation started', null=True)),
                ('ready_at', models.DateTimeField(blank=True, help_text='When order was marked ready', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When order was completed', null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, help_text='When order was cancelled', null=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Staff member assigned to handle this order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_orders', to=settings.AUTH_USER_MODEL)),
                ('source_cart', models.ForeignKey(blank=True, help_text='Source cart if converted from cart', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='converted_orders', to='orders.cart')),
                ('table', models.ForeignKey(blank=True, help_text='Assigned table for dine-in orders', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='core.table')),
                ('user', models.ForeignKey(blank=True, help_text='Order customer (null for guest orders)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Item quantity (1-999)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price at time of order creation', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('modifiers', models.JSONField(blank=True, default=list, help_text='Selected modifier details with prices')),
                ('notes', models.TextField(blank=True, help_text='Special instructions for this item', max_length=500)),
                ('item_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for this order item')),
                ('modifier_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total cost of selected modifiers', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('line_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total line cost (unit_price + modifiers) * quantity', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('discount_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Item-level discount applied', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_gift', models.BooleanField(default=False, help_text='Mark item as gift')),
                ('gift_message', models.CharField(blank=True, help_text='Gift message for this item', max_length=200)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PREPARING', 'Preparing'), ('READY', 'Ready'), ('SERVED', 'Served'), ('CANCELLED', 'Cancelled')], default='PENDING', help_text='Item preparation status', max_length=20)),
                ('preparation_notes', models.TextField(blank=True, help_text='Kitchen/preparation notes', max_length=300)),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('started_preparing_at', models.DateTimeField(blank=True, help_text='When item preparation started', null=True)),
                ('ready_at', models.DateTimeField(blank=True, help_text='When item was ready', null=True)),
                ('served_at', models.DateTimeField(blank=True, help_text='When item was served', null=True)),
                ('menu_item', models.ForeignKey(help_text='Menu item being ordered', on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='menu.menuitem')),
                ('order', models.ForeignKey(help_text='Parent order', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.order')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['user', 'status', '-updated_at'], name='orders_cart_user_id_d7e3a4_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['session_key', 'status'], name='orders_cart_session_25eb61_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['cart_uuid'], name='orders_cart_cart_uu_7697d8_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['status', '-last_activity'], name='orders_cart_status_51c62c_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['table', 'status'], name='orders_cart_table_i_ba91b1_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['expires_at'], name='orders_cart_expires_6fbde1_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['delivery_option', 'status'], name='orders_cart_deliver_7cb876_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['applied_coupon_code'], name='orders_cart_applied_6641a8_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['ip_address', '-created_at'], name='orders_cart_ip_addr_5e8da2_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['source', '-created_at'], name='orders_cart_source_576ca1_idx'),
        ),
        migrations.AddIndex(
            model_name='cart',
            index=models.Index(fields=['-total', 'status'], name='orders_cart_total_a05933_idx'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('subtotal__gte', 0)), name='positive_cart_subtotal'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('discount_amount__gte', 0)), name='positive_cart_discount'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('coupon_discount__gte', 0)), name='positive_cart_coupon_discount'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('loyalty_discount__gte', 0)), name='positive_cart_loyalty_discount'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('tip_amount__gte', 0)), name='positive_cart_tip'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('delivery_fee__gte', 0)), name='positive_cart_delivery_fee'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('service_fee__gte', 0)), name='positive_cart_service_fee'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('tax_amount__gte', 0)), name='positive_cart_tax_amount'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('total__gte', 0)), name='positive_cart_total'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(models.Q(('delivery_option', 'DINE_IN'), ('table__isnull', False)), models.Q(('delivery_option__in', ['PICKUP', 'DELIVERY']), ('table__isnull', True)), _connector='OR')), name='valid_cart_table_delivery_combination'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('user__isnull', False), ('session_key__isnull', False), _connector='OR')), name='cart_must_have_user_or_session'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('tax_rate__gte', 0), ('tax_rate__lte', 1)), name='valid_cart_tax_rate'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['cart', 'menu_item'], name='orders_cart_cart_id_53d848_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['menu_item', 'created_at'], name='orders_cart_menu_it_a27434_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['cart', 'created_at'], name='orders_cart_cart_id_8d5aaf_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['item_uuid'], name='orders_cart_item_uu_de2524_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['cart', 'is_gift'], name='orders_cart_cart_id_144001_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['scheduled_for'], name='orders_cart_schedul_811475_idx'),
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['added_via', 'created_at'], name='orders_cart_added_v_499487_idx'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gte', 1), ('quantity__lte', 999)), name='valid_cart_item_quantity'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.CheckConstraint(condition=models.Q(('unit_price__gte', Decimal('0.01'))), name='positive_cart_item_price'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.CheckConstraint(condition=models.Q(('original_price__gte', Decimal('0.01'))), name='positive_cart_item_original_price'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.CheckConstraint(condition=models.Q(('discount_applied__gte', 0)), name='positive_cart_item_discount'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.CheckConstraint(condition=models.Q(('modifier_total__gte', 0)), name='positive_cart_item_modifier_total'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.CheckConstraint(condition=models.Q(('line_total__gte', 0)), name='positive_cart_item_line_total'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'status', '-created_at'], name='orders_orde_user_id_aab4c7_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', '-created_at'], name='orders_orde_status_079368_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['order_uuid'], name='orders_orde_order_u_96e812_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['order_number'], name='orders_orde_order_n_f3ada5_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['delivery_option', 'status'], name='orders_orde_deliver_f409ab_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['table', 'status'], name='orders_orde_table_i_5b8f2b_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['payment_status', '-created_at'], name='orders_orde_payment_8bdf8b_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['assigned_to', 'status'], name='orders_orde_assigne_6abf64_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['applied_coupon_code'], name='orders_orde_applied_cb16bd_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['source', '-created_at'], name='orders_orde_source_bb9690_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['-total_amount', 'status'], name='orders_orde_total_a_e2597a_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['estimated_delivery_time'], name='orders_orde_estimat_267886_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['customer_phone'], name='orders_orde_custome_59f5e1_idx'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('subtotal__gte', 0)), name='positive_order_subtotal'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('discount_amount__gte', 0)), name='positive_order_discount'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('coupon_discount__gte', 0)), name='positive_order_coupon_discount'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('loyalty_discount__gte', 0)), name='positive_order_loyalty_discount'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('tip_amount__gte', 0)), name='positive_order_tip'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('delivery_fee__gte', 0)), name='positive_order_delivery_fee'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('service_fee__gte', 0)), name='positive_order_service_fee'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('tax_amount__gte', 0)), name='positive_order_tax_amount'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('total_amount__gte', 0)), name='positive_order_total'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('refund_amount__gte', 0)), name='positive_order_refund_amount'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('refund_amount__lte', models.F('total_amount'))), name='refund_not_exceeding_total'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(models.Q(('delivery_option', 'DINE_IN'), ('table__isnull', False)), models.Q(('delivery_option__in', ['PICKUP', 'DELIVERY']), ('table__isnull', True)), _connector='OR')), name='valid_order_table_delivery_combination'),
        ),
        migrations.AddConstraint(
            model_name='order',
            constraint=models.CheckConstraint(condition=models.Q(('tax_rate__gte', 0), ('tax_rate__lte', 1)), name='valid_order_tax_rate'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order', 'menu_item'], name='orders_orde_order_i_5d7cf8_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['menu_item', 'created_at'], name='orders_orde_menu_it_97a006_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order', 'status'], name='orders_orde_order_i_3360fc_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['status', 'created_at'], name='orders_orde_status_351845_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['item_uuid'], name='orders_orde_item_uu_e485c1_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['is_gift'], name='orders_orde_is_gift_73b96b_idx'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gte', 1), ('quantity__lte', 999)), name='valid_order_item_quantity'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.CheckConstraint(condition=models.Q(('unit_price__gte', Decimal('0.01'))), name='positive_order_item_price'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.CheckConstraint(condition=models.Q(('modifier_total__gte', 0)), name='positive_order_item_modifier_total'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.CheckConstraint(condition=models.Q(('line_total__gte', 0)), name='positive_order_item_line_total'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.CheckConstraint(condition=models.Q(('discount_applied__gte', 0)), name='positive_order_item_discount'),
        ),
    ]
