# Generated by Django 5.1.2 on 2025-09-02 04:19

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MenuCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for external API references')),
                ('name', models.CharField(help_text='Category name (HTML tags will be stripped)', max_length=100, validators=[django.core.validators.RegexValidator(message='Category name contains invalid characters', regex='^[a-zA-Z0-9\\s\\-&\\\'".,!()]+$')])),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the name', max_length=120)),
                ('description', models.TextField(blank=True, help_text='Category description (HTML tags will be stripped)', max_length=500)),
                ('level', models.PositiveSmallIntegerField(default=0, help_text='Hierarchy level (0-5, calculated automatically)', validators=[django.core.validators.MaxValueValidator(5)])),
                ('image', models.ImageField(blank=True, help_text='Category image (optimized automatically)', null=True, upload_to='categories/%Y/%m/')),
                ('icon', models.CharField(blank=True, help_text='Icon class name for UI display', max_length=50)),
                ('color_theme', models.CharField(blank=True, help_text='Theme color for category display', max_length=7, validators=[django.core.validators.RegexValidator('^#[0-9A-Fa-f]{6}$', 'Enter a valid hex color')])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is currently active')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured categories appear prominently')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order (0-9999)', validators=[django.core.validators.MaxValueValidator(9999)])),
                ('available_from', models.TimeField(blank=True, help_text='Daily availability start time', null=True)),
                ('available_until', models.TimeField(blank=True, help_text='Daily availability end time', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item_count', models.PositiveIntegerField(default=0, help_text='Cached count of active items (updated via signals)')),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum item price in category (cached)', max_digits=10, null=True)),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum item price in category (cached)', max_digits=10, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_categories', to='core.organization')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for nested categories', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='menu.menucategory')),
            ],
            options={
                'verbose_name': 'Menu Category',
                'verbose_name_plural': 'Menu Categories',
                'ordering': ['level', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for external API references')),
                ('name', models.CharField(help_text='Item name (HTML tags will be stripped)', max_length=200, validators=[django.core.validators.RegexValidator(message='Item name contains invalid characters', regex='^[a-zA-Z0-9\\s\\-&\\\'".,!()]+$')])),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the name', max_length=220)),
                ('description', models.TextField(blank=True, help_text='Item description (HTML tags will be stripped)', max_length=1000)),
                ('short_description', models.CharField(blank=True, help_text='Brief description for cards and lists', max_length=150)),
                ('price', models.DecimalField(decimal_places=2, help_text='Base item price (0.01 - 99999.99)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01')), django.core.validators.MaxValueValidator(Decimal('99999.99'))])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price for profit margin calculations', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('image', models.ImageField(blank=True, help_text='Primary item image (optimized automatically)', null=True, upload_to='menu_items/%Y/%m/')),
                ('gallery_images', models.JSONField(blank=True, default=list, help_text='Additional images for gallery display')),
                ('is_available', models.BooleanField(default=True, help_text='Whether this item is currently available')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured items appear prominently')),
                ('is_popular', models.BooleanField(default=False, help_text='Popular items based on sales data')),
                ('is_new', models.BooleanField(default=False, help_text='New items for promotional display')),
                ('is_vegetarian', models.BooleanField(default=False, help_text='Whether this item is vegetarian')),
                ('is_vegan', models.BooleanField(default=False, help_text='Whether this item is vegan')),
                ('is_gluten_free', models.BooleanField(default=False, help_text='Whether this item is gluten-free')),
                ('is_dairy_free', models.BooleanField(default=False, help_text='Whether this item is dairy-free')),
                ('is_nut_free', models.BooleanField(default=False, help_text='Whether this item is nut-free')),
                ('is_spicy', models.BooleanField(default=False, help_text='Whether this item is spicy')),
                ('spice_level', models.PositiveSmallIntegerField(default=0, help_text='Spice level (0-5, 0 = not spicy)', validators=[django.core.validators.MaxValueValidator(5)])),
                ('allergens', models.JSONField(blank=True, default=list, help_text='List of allergens present in this item')),
                ('calories', models.PositiveIntegerField(blank=True, help_text='Calorie count per serving', null=True)),
                ('protein_grams', models.DecimalField(blank=True, decimal_places=2, help_text='Protein content in grams', max_digits=6, null=True)),
                ('carbs_grams', models.DecimalField(blank=True, decimal_places=2, help_text='Carbohydrate content in grams', max_digits=6, null=True)),
                ('fat_grams', models.DecimalField(blank=True, decimal_places=2, help_text='Fat content in grams', max_digits=6, null=True)),
                ('preparation_time', models.PositiveIntegerField(default=15, help_text='Estimated preparation time in minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(480)])),
                ('serving_size', models.CharField(blank=True, help_text="Serving size description (e.g., '1 piece', '250ml')", max_length=50)),
                ('track_inventory', models.BooleanField(default=False, help_text='Whether to track inventory for this item')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Current stock quantity (if tracking inventory)')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, help_text='Alert threshold for low stock')),
                ('available_from', models.TimeField(blank=True, help_text='Daily availability start time', null=True)),
                ('available_until', models.TimeField(blank=True, help_text='Daily availability end time', null=True)),
                ('available_days', models.JSONField(blank=True, default=list, help_text='Days of week when available (0=Monday, 6=Sunday)')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order within category (0-9999)', validators=[django.core.validators.MaxValueValidator(9999)])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times this item has been viewed')),
                ('order_count', models.PositiveIntegerField(default=0, help_text='Number of times this item has been ordered')),
                ('rating_average', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average customer rating (0.00-5.00)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('rating_count', models.PositiveIntegerField(default=0, help_text='Number of ratings received')),
                ('category', models.ForeignKey(help_text='Category this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='menu.menucategory')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='core.organization')),
            ],
            options={
                'verbose_name': 'Menu Item',
                'verbose_name_plural': 'Menu Items',
                'ordering': ['category__sort_order', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ModifierGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Modifier group name (e.g., 'Size', 'Toppings')", max_length=100, validators=[django.core.validators.RegexValidator(message='Modifier group name contains invalid characters', regex='^[a-zA-Z0-9\\s\\-&\\\'".,!()]+$')])),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the name', max_length=120)),
                ('description', models.TextField(blank=True, help_text='Optional description for the modifier group', max_length=500)),
                ('selection_type', models.CharField(choices=[('single', 'Single Selection'), ('multiple', 'Multiple Selection'), ('exactly', 'Exact Count'), ('range', 'Range Selection')], default='single', help_text='Type of selection allowed', max_length=20)),
                ('is_required', models.BooleanField(default=False, help_text='Whether customer must select from this group')),
                ('min_selections', models.PositiveIntegerField(default=0, help_text='Minimum number of selections required (0-50)', validators=[django.core.validators.MaxValueValidator(50)])),
                ('max_selections', models.PositiveIntegerField(default=1, help_text='Maximum number of selections allowed (1-50)', validators=[django.core.validators.MaxValueValidator(50)])),
                ('display_style', models.CharField(choices=[('radio', 'Radio Buttons'), ('checkbox', 'Checkboxes'), ('dropdown', 'Dropdown'), ('button_group', 'Button Group'), ('stepper', 'Quantity Stepper')], default='radio', help_text='How to display this modifier group in the UI', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this modifier group is currently active')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order within menu item (0-9999)', validators=[django.core.validators.MaxValueValidator(9999)])),
                ('allow_half_portions', models.BooleanField(default=False, help_text='Allow half portions for applicable modifiers')),
                ('collapse_single_option', models.BooleanField(default=True, help_text='Hide group if only one available option')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu_item', models.ForeignKey(help_text='Menu item this modifier group belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='direct_modifier_groups', to='menu.menuitem')),
            ],
            options={
                'verbose_name': 'Modifier Group',
                'verbose_name_plural': 'Modifier Groups',
                'ordering': ['menu_item', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Modifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Modifier option name (e.g., 'Large', 'Extra Cheese')", max_length=100, validators=[django.core.validators.RegexValidator(message='Modifier name contains invalid characters', regex='^[a-zA-Z0-9\\s\\-&\\\'".,!()%]+$')])),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the name', max_length=120)),
                ('description', models.TextField(blank=True, help_text='Optional description for the modifier', max_length=300)),
                ('short_name', models.CharField(blank=True, help_text='Abbreviated name for compact displays', max_length=20)),
                ('modifier_type', models.CharField(choices=[('addon', 'Add-on'), ('substitution', 'Substitution'), ('size', 'Size Option'), ('preparation', 'Preparation Style'), ('removal', 'Remove Item')], default='addon', help_text='Type of modifier for business logic', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Price adjustment (-999.99 to 999.99, can be negative for discounts)', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('-999.99')), django.core.validators.MaxValueValidator(Decimal('999.99'))])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost for this modifier (for profit calculations)', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_available', models.BooleanField(default=True, help_text='Whether this modifier is currently available')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this modifier is selected by default')),
                ('is_popular', models.BooleanField(default=False, help_text='Popular modifier for promotional display')),
                ('is_seasonal', models.BooleanField(default=False, help_text='Seasonal modifier with limited availability')),
                ('track_inventory', models.BooleanField(default=False, help_text='Whether to track inventory for this modifier')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Current stock quantity (if tracking inventory)')),
                ('daily_limit', models.PositiveIntegerField(blank=True, help_text='Maximum times this modifier can be ordered per day', null=True)),
                ('daily_count', models.PositiveIntegerField(default=0, help_text='Number of times ordered today')),
                ('calorie_adjustment', models.IntegerField(default=0, help_text='Calorie adjustment (positive or negative)')),
                ('available_from', models.TimeField(blank=True, help_text='Daily availability start time', null=True)),
                ('available_until', models.TimeField(blank=True, help_text='Daily availability end time', null=True)),
                ('available_days', models.JSONField(blank=True, default=list, help_text='Days of week when available (0=Monday, 6=Sunday)')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order within group (0-9999)', validators=[django.core.validators.MaxValueValidator(9999)])),
                ('icon', models.CharField(blank=True, help_text='Icon class or emoji for display', max_length=50)),
                ('color_code', models.CharField(blank=True, help_text='Hex color code for visual theming', max_length=7, validators=[django.core.validators.RegexValidator(message='Color must be a valid hex code (e.g., #FF5733)', regex='^#[0-9A-Fa-f]{6}$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order_count', models.PositiveIntegerField(default=0, help_text='Number of times this modifier has been ordered')),
                ('last_ordered', models.DateTimeField(blank=True, help_text='Last time this modifier was ordered', null=True)),
                ('modifier_group', models.ForeignKey(help_text='Modifier group this option belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='menu.modifiergroup')),
            ],
            options={
                'verbose_name': 'Modifier',
                'verbose_name_plural': 'Modifiers',
                'ordering': ['modifier_group', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuItemModifierGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_required', models.BooleanField(default=False, help_text='Whether this modifier group is required for the menu item')),
                ('is_visible', models.BooleanField(default=True, help_text='Whether this modifier group is visible for the menu item')),
                ('override_min_selections', models.PositiveIntegerField(blank=True, help_text='Override minimum selections for this item (null = use group default)', null=True)),
                ('override_max_selections', models.PositiveIntegerField(blank=True, help_text='Override maximum selections for this item (null = use group default)', null=True)),
                ('override_selection_type', models.CharField(blank=True, choices=[('single', 'Single Selection'), ('multiple', 'Multiple Selection'), ('exact', 'Exact Count'), ('range', 'Range Selection')], help_text='Override selection type for this item (blank = use group default)', max_length=20)),
                ('custom_name', models.CharField(blank=True, help_text='Custom name for this modifier group on this item (blank = use group name)', max_length=100)),
                ('custom_description', models.TextField(blank=True, help_text='Custom description for this modifier group on this item', max_length=200)),
                ('price_multiplier', models.DecimalField(decimal_places=3, default=Decimal('1.000'), help_text='Price multiplier for all modifiers in this group (1.000 = no change)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.000')), django.core.validators.MaxValueValidator(Decimal('10.000'))])),
                ('available_from', models.TimeField(blank=True, help_text='Override availability start time for this group on this item', null=True)),
                ('available_until', models.TimeField(blank=True, help_text='Override availability end time for this group on this item', null=True)),
                ('available_days', models.JSONField(blank=True, default=list, help_text='Override available days for this group on this item')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order for this modifier group on the item (0-9999)', validators=[django.core.validators.MaxValueValidator(9999)])),
                ('show_when_item_size', models.CharField(blank=True, help_text='Only show this group when item has specific size modifier', max_length=50)),
                ('hide_when_item_size', models.CharField(blank=True, help_text='Hide this group when item has specific size modifier', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times modifiers from this group were selected')),
                ('last_used', models.DateTimeField(blank=True, help_text='Last time a modifier from this group was selected', null=True)),
                ('menu_item', models.ForeignKey(help_text='Menu item this modifier group applies to', on_delete=django.db.models.deletion.CASCADE, related_name='modifier_groups', to='menu.menuitem')),
                ('modifier_group', models.ForeignKey(help_text='Modifier group that applies to the menu item', on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='menu.modifiergroup')),
            ],
            options={
                'verbose_name': 'Menu Item Modifier Group',
                'verbose_name_plural': 'Menu Item Modifier Groups',
                'ordering': ['menu_item', 'sort_order', 'modifier_group__name'],
            },
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['organization', 'is_active', 'sort_order'], name='menu_menuca_organiz_a98228_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['is_active', 'is_featured', 'sort_order'], name='menu_menuca_is_acti_8e41a3_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['parent', 'sort_order'], name='menu_menuca_parent__a70408_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['level', 'sort_order'], name='menu_menuca_level_f2b3e8_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['-created_at'], name='menu_menuca_created_a473aa_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['uuid'], name='menu_menuca_uuid_a9e8e0_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['slug'], name='menu_menuca_slug_caefbf_idx'),
        ),
        migrations.AddConstraint(
            model_name='menucategory',
            constraint=models.CheckConstraint(condition=models.Q(('level__gte', 0), ('level__lte', 5)), name='menu_category_valid_level'),
        ),
        migrations.AddConstraint(
            model_name='menucategory',
            constraint=models.CheckConstraint(condition=models.Q(('available_from__isnull', True), ('available_until__isnull', True), ('available_from__lt', models.F('available_until')), _connector='OR'), name='menu_category_valid_availability_times'),
        ),
        migrations.AlterUniqueTogether(
            name='menucategory',
            unique_together={('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['category', 'is_available', 'sort_order'], name='menu_menuit_categor_21bdb5_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['organization', 'is_available'], name='menu_menuit_organiz_1b225e_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_available', 'sort_order'], name='menu_menuit_is_avai_5aabe9_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_vegetarian', 'is_available'], name='menu_menuit_is_vege_2f08f3_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_vegan', 'is_available'], name='menu_menuit_is_vega_b034f0_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_gluten_free', 'is_available'], name='menu_menuit_is_glut_9126f0_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_available', 'is_featured'], name='menu_menuit_is_avai_74a54e_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_available', 'is_popular'], name='menu_menuit_is_avai_8f3099_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['price'], name='menu_menuit_price_7d229e_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['uuid'], name='menu_menuit_uuid_117459_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['slug'], name='menu_menuit_slug_c22fc1_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['-created_at'], name='menu_menuit_created_87e2a9_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['-order_count'], name='menu_menuit_order_c_88956c_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['-rating_average'], name='menu_menuit_rating__124ce0_idx'),
        ),
        migrations.AddConstraint(
            model_name='menuitem',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', Decimal('0.01'))), name='valid_menu_item_price'),
        ),
        migrations.AddConstraint(
            model_name='menuitem',
            constraint=models.CheckConstraint(condition=models.Q(('preparation_time__gte', 1), ('preparation_time__lte', 480)), name='valid_preparation_time'),
        ),
        migrations.AddConstraint(
            model_name='menuitem',
            constraint=models.CheckConstraint(condition=models.Q(('spice_level__gte', 0), ('spice_level__lte', 5)), name='menu_item_valid_spice_level'),
        ),
        migrations.AddConstraint(
            model_name='menuitem',
            constraint=models.CheckConstraint(condition=models.Q(('rating_average__gte', 0), ('rating_average__lte', 5)), name='menu_item_valid_rating'),
        ),
        migrations.AddConstraint(
            model_name='menuitem',
            constraint=models.CheckConstraint(condition=models.Q(('available_from__isnull', True), ('available_until__isnull', True), ('available_from__lt', models.F('available_until')), _connector='OR'), name='menu_item_valid_availability_times'),
        ),
        migrations.AlterUniqueTogether(
            name='menuitem',
            unique_together={('category', 'slug'), ('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='modifiergroup',
            index=models.Index(fields=['menu_item', 'is_active', 'sort_order'], name='menu_modifi_menu_it_cdbaf8_idx'),
        ),
        migrations.AddIndex(
            model_name='modifiergroup',
            index=models.Index(fields=['is_required', 'is_active'], name='menu_modifi_is_requ_3a6a47_idx'),
        ),
        migrations.AddIndex(
            model_name='modifiergroup',
            index=models.Index(fields=['selection_type'], name='menu_modifi_selecti_4d083b_idx'),
        ),
        migrations.AddIndex(
            model_name='modifiergroup',
            index=models.Index(fields=['slug'], name='menu_modifi_slug_a39c75_idx'),
        ),
        migrations.AddConstraint(
            model_name='modifiergroup',
            constraint=models.CheckConstraint(condition=models.Q(('min_selections__lte', models.F('max_selections'))), name='modifier_group_valid_selection_range'),
        ),
        migrations.AddConstraint(
            model_name='modifiergroup',
            constraint=models.CheckConstraint(condition=models.Q(('min_selections__gte', 0), ('max_selections__gte', 1)), name='modifier_group_valid_selection_counts'),
        ),
        migrations.AlterUniqueTogether(
            name='modifiergroup',
            unique_together={('menu_item', 'slug')},
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['modifier_group', 'is_available', 'sort_order'], name='menu_modifi_modifie_c94a1a_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['is_default', 'is_available'], name='menu_modifi_is_defa_25850e_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['modifier_type'], name='menu_modifi_modifie_e4f5a8_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['is_popular', 'is_available'], name='menu_modifi_is_popu_eda0b5_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['slug'], name='menu_modifi_slug_adca52_idx'),
        ),
        migrations.AddIndex(
            model_name='modifier',
            index=models.Index(fields=['-order_count'], name='menu_modifi_order_c_c2b95b_idx'),
        ),
        migrations.AddConstraint(
            model_name='modifier',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', Decimal('-999.99')), ('price__lte', Decimal('999.99'))), name='modifier_valid_price_range'),
        ),
        migrations.AddConstraint(
            model_name='modifier',
            constraint=models.CheckConstraint(condition=models.Q(('available_from__isnull', True), ('available_until__isnull', True), ('available_from__lt', models.F('available_until')), _connector='OR'), name='modifier_valid_availability_times'),
        ),
        migrations.AddConstraint(
            model_name='modifier',
            constraint=models.CheckConstraint(condition=models.Q(('daily_count__gte', 0)), name='modifier_valid_daily_count'),
        ),
        migrations.AlterUniqueTogether(
            name='modifier',
            unique_together={('modifier_group', 'slug')},
        ),
        migrations.AddIndex(
            model_name='menuitemmodifiergroup',
            index=models.Index(fields=['menu_item', 'sort_order'], name='menu_menuit_menu_it_7d7a1f_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemmodifiergroup',
            index=models.Index(fields=['modifier_group', 'is_required'], name='menu_menuit_modifie_b1618c_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemmodifiergroup',
            index=models.Index(fields=['is_visible', 'is_required'], name='menu_menuit_is_visi_a872ce_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemmodifiergroup',
            index=models.Index(fields=['-usage_count'], name='menu_menuit_usage_c_c8798b_idx'),
        ),
        migrations.AddConstraint(
            model_name='menuitemmodifiergroup',
            constraint=models.UniqueConstraint(fields=('menu_item', 'modifier_group'), name='unique_menu_item_modifier_group'),
        ),
        migrations.AddConstraint(
            model_name='menuitemmodifiergroup',
            constraint=models.CheckConstraint(condition=models.Q(('price_multiplier__gte', Decimal('0.000')), ('price_multiplier__lte', Decimal('10.000'))), name='valid_price_multiplier_range'),
        ),
        migrations.AddConstraint(
            model_name='menuitemmodifiergroup',
            constraint=models.CheckConstraint(condition=models.Q(('available_from__isnull', True), ('available_until__isnull', True), ('available_from__lt', models.F('available_until')), _connector='OR'), name='valid_override_availability_times'),
        ),
    ]
