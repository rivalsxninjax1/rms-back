# Generated by Django 5.1.2 on 2025-09-02 04:19

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Organization name (HTML tags will be stripped)', max_length=200)),
                ('tax_percent', models.DecimalField(decimal_places=2, default=0.0, help_text='Tax percentage (0-100%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('address', models.TextField(blank=True, help_text='Organization address (HTML tags will be stripped)')),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='core_organi_name_d0cc3b_idx'), models.Index(fields=['created_at'], name='core_organi_created_6d9c57_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('tax_percent__gte', 0), ('tax_percent__lte', 100)), name='valid_tax_percent')],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Location name (HTML tags will be stripped)', max_length=200)),
                ('address', models.TextField(blank=True, help_text='Location address (HTML tags will be stripped)')),
                ('timezone', models.CharField(default='UTC', help_text="Timezone in format 'Region/City' or 'UTC'", max_length=50, validators=[django.core.validators.RegexValidator(message="Timezone must be in format 'Region/City' or 'UTC'.", regex='^[A-Za-z_]+/[A-Za-z_]+$|^UTC$')])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this location is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='core.organization')),
            ],
            options={
                'ordering': ['organization', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Service type name (e.g., 'Dine-in', 'Pickup', 'Delivery')", max_length=50, unique=True)),
                ('code', models.CharField(help_text='Service type code for API/system use', max_length=20, unique=True)),
                ('description', models.TextField(blank=True, help_text='Service type description')),
                ('base_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Base service fee', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('requires_table', models.BooleanField(default=False, help_text='Whether this service type requires table assignment')),
                ('allows_reservations', models.BooleanField(default=False, help_text='Whether reservations are allowed for this service type')),
                ('max_advance_days', models.PositiveIntegerField(default=30, help_text='Maximum days in advance for reservations (1-365)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('min_advance_minutes', models.PositiveIntegerField(default=30, help_text='Minimum minutes in advance for reservations (0-1440)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1440)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this service type is currently available')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order (lower numbers appear first)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['sort_order', 'name'],
                'indexes': [models.Index(fields=['is_active', 'sort_order'], name='core_servic_is_acti_4e52db_idx'), models.Index(fields=['code'], name='core_servic_code_e378b7_idx'), models.Index(fields=['requires_table'], name='core_servic_require_f16096_idx'), models.Index(fields=['allows_reservations'], name='core_servic_allows__6ad986_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('base_fee__gte', 0)), name='positive_service_base_fee'), models.CheckConstraint(condition=models.Q(('max_advance_days__gte', 1), ('max_advance_days__lte', 365)), name='valid_max_advance_days'), models.CheckConstraint(condition=models.Q(('min_advance_minutes__gte', 0), ('min_advance_minutes__lte', 1440)), name='valid_min_advance_minutes')],
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_number', models.CharField(help_text='Unique table identifier (alphanumeric, hyphens, underscores only)', max_length=50, validators=[django.core.validators.RegexValidator(message='Table number can only contain letters, numbers, hyphens, and underscores.', regex='^[A-Za-z0-9\\-_]+$')])),
                ('capacity', models.PositiveIntegerField(help_text='Maximum seating capacity (1-50 people)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this table is currently available for use')),
                ('table_type', models.CharField(choices=[('dining', 'Dining Table'), ('bar', 'Bar Table'), ('outdoor', 'Outdoor Table'), ('private', 'Private Dining')], default='dining', help_text='Type of table for service categorization', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_tables', to='core.location')),
            ],
            options={
                'ordering': ['location_id', 'table_number'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_uuid', models.UUIDField(default=uuid.uuid4, help_text='Unique reservation identifier', unique=True)),
                ('confirmation_number', models.CharField(blank=True, help_text='Human-readable confirmation number', max_length=20, unique=True)),
                ('guest_name', models.CharField(help_text='Guest name for reservation', max_length=100)),
                ('guest_phone', models.CharField(help_text='Guest contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('guest_email', models.EmailField(blank=True, help_text='Guest email address (optional)', max_length=254)),
                ('party_size', models.PositiveIntegerField(help_text='Number of guests (1-50)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('reservation_date', models.DateField(help_text='Date of reservation')),
                ('reservation_time', models.TimeField(help_text='Time of reservation')),
                ('duration_minutes', models.PositiveIntegerField(default=120, help_text='Expected duration in minutes (30-480)', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(480)])),
                ('status', models.CharField(choices=[('pending', 'Pending Confirmation'), ('confirmed', 'Confirmed'), ('seated', 'Seated'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='pending', help_text='Current reservation status', max_length=20)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When reservation was confirmed', null=True)),
                ('seated_at', models.DateTimeField(blank=True, help_text='When party was seated', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When reservation was completed', null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, help_text='When reservation was cancelled', null=True)),
                ('special_requests', models.TextField(blank=True, help_text='Special requests or notes')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal staff notes')),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Required deposit amount', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('deposit_paid', models.BooleanField(default=False, help_text='Whether deposit has been paid')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Staff member who created the reservation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_core_reservations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, help_text='Registered user (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='core_reservations', to=settings.AUTH_USER_MODEL)),
                ('service_type', models.ForeignKey(help_text='Service type for this reservation', on_delete=django.db.models.deletion.CASCADE, related_name='core_reservations', to='core.servicetype')),
                ('table', models.ForeignKey(help_text='Reserved table', on_delete=django.db.models.deletion.CASCADE, related_name='core_reservations', to='core.table')),
            ],
            options={
                'ordering': ['reservation_date', 'reservation_time'],
            },
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['organization', 'is_active'], name='core_locati_organiz_87cdbe_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['name'], name='core_locati_name_65ac84_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['is_active'], name='core_locati_is_acti_d10f4b_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['created_at'], name='core_locati_created_40de8f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['location', 'is_active'], name='core_table_locatio_610cd9_idx'),
        ),
        migrations.AddIndex(
            model_name='table',
            index=models.Index(fields=['table_type', 'is_active'], name='core_table_table_t_14a6a0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='table',
            unique_together={('location', 'table_number')},
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['reservation_date', 'reservation_time'], name='core_reserv_reserva_5294d9_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['table', 'reservation_date', 'status'], name='core_reserv_table_i_f70308_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['user', 'status'], name='core_reserv_user_id_1cb23f_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['guest_phone'], name='core_reserv_guest_p_3d3301_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['confirmation_number'], name='core_reserv_confirm_6b773f_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['reservation_uuid'], name='core_reserv_reserva_3e2b36_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['status', 'reservation_date'], name='core_reserv_status_da8661_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['service_type', 'status'], name='core_reserv_service_6a94ab_idx'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('party_size__gte', 1), ('party_size__lte', 50)), name='valid_party_size'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('duration_minutes__gte', 30), ('duration_minutes__lte', 480)), name='valid_duration_minutes'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.CheckConstraint(condition=models.Q(('deposit_amount__gte', 0)), name='positive_deposit_amount'),
        ),
    ]
